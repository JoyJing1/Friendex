c
@post_comment.valid?
@post_comment
@post_comment= PostComment.new(post_comment_params)
post_comment_params
c
post_comment_params
params[:post_id]
c
params[:post_id]
params.post_id
params
c
item.type
item
c
 render "api/newsfeeds/show"
@newsfeed.length
@newsfeed
c
@newsfeed.length
@newsfeed[-1].length
@newsfeed[-1].type
@newsfeed[-1]
@newsfeed
c
xc
posts.each { |el| el.type = "text" }
posts = Post.where("receiver_id = ? OR author_id =  ?", receiver_id, author_id)
@test_posts.each { |el| el.type = "text" }
@text_posts
c
@posts.concat(@images).sort(updated_at: :desc)
@posts.concat(@images).order(updated_at: :desc)
c
@posts[0].type
@posts
c
@posts[0].type
@posts[0]
@posts
@posts.each { |el| el.type = "text" }
@posts = Post.where("receiver_id = ? OR author_id =  ?", receiver_id, author_id)
@posts = @posts.map { |el| el.type = "text"; el }
@posts
@posts = @posts.map { |el| el.type = "text" }
@posts = @posts.map { |el| p el }
@posts = @posts.map { |el| el[:type] = "text" }
@posts
c
@posts = @posts.map { |el| el[:type] = "text" }
@posts = Post.where("receiver_id = ? OR author_id =  ?", receiver_id, author_id)
receiver_id
@posts
c
@posts
@images
c
author_id
receiver_id
@posts[0]
@posts
@posts = Post.where("receiver_id = ? OR author_id =  ?", receiver_id, author_id)
@posts
c
@posts
c@posts
c
@posts = @posts.map { |el| el[:type] = "text" }
      @posts = Post.where("receiver_id = ? OR author_id =  ?", receiver_id, author_id)
@posts
@posts = @posts.map { |el| el["type"] = "text" }
  @posts = @posts.map { |el| el.type = "text" }
  @posts = Post.where("receiver_id = ? OR author_id =  ?", receiver_id, author_id)
@posts = @posts.map { |el| el.type = "text" }
        el.type = "text"
      @posts = @posts.map do |el|
@posts[0]
@posts = Post.select("id" "'string' as type").where("receiver_id = ? OR author_id =  ?", receiver_id, author_id)
@posts[0]
@posts
@posts = Post.where("receiver_id = ? OR author_id =  ?", receiver_id, author_id).select("id" "'string' as type")
              .select("id" "'string' as type")
      @posts = Post.where("receiver_id = ? OR author_id =  ?", receiver_id, author_id)
@posts.select("id" "'string' as type")[0]
@posts.select("id" "'string' as type")
@posts[0].select("*, 'string' as type")
@posts[0]
@posts
@posts = Post.where("receiver_id = ? OR author_id =  ?", receiver_id, author_id).select("*, 'string' as type")
@posts
@posts.each { |e| e.body="change body" }
@posts.each { |e| e.type="text" }
@posts
@posts.type = "text"
@posts.class
@posts.type
@posts
@post
@post.type
@post.class
 @posts = Post.where("receiver_id = ? OR author_id =  ?", receiver_id, author_id)
step
receiver_id || author_id
receiver_id
author_id
c
receiver_id || author_id
author_id
receiver_id
c
author_id
receiver_id
c
params
c
@posts[1]
@posts[1].author_profile
@posts.length
@posts[1].author_profile.profile_img
@posts[0].author_profile.profile_img
@posts[0].author_profile
@posts[0]
render "api/posts/index"
@posts
c
@posts
c
params
params[:receiver_id]
receiver_id
receive_id
author_id
@posts
c
upload_preset
cloud_name
c
cloud_name
c
upload_preset
c
ENV['cloud_name']
ENV['CLOUD_NAME']
ENV
c
params
c
params
ENV['UPLOAD_PRESET']
ENV['CLOUD_NAME']
ENV
c
@newsfeed.length
@newsfeed
 json.partial!('friendship', friendship: item)
item
c
cc
c
json.partial!('post', post: item)
item
json.partial!('post', post: item)
c
json.extract!(item,:type,:author_id, :author_first_name, :author_last_name, :author_img,:receiver_id, :receiver_first_name, :receiver_last_name,:post_id, :body,:updated_at)
)
  :updated_at
  :post_id, :body,
  :receiver_id, :receiver_first_name, :receiver_last_name,
  :author_id, :author_first_name, :author_last_name, :author_img,
  :type,
  item,
json.extract!(
item.author_id
item
json.partial!('post', post: item)
json.partial!('post', item: post)
 json.partial!('post', post: item)
item
c
 json.partial!('api/newsfeeds/post', post: item)
item
json.partial!('api/newsfeeds/post', post: item)
json.partial!('api/newsfeeds/friendship', friendship: item)
c
 json.partial!('friendship', friendship: item)
json.partial!('post', post: item)
item
citem
c
result.class
type(result)
result.type
result
c
result
c
result
c
json.partial!('friendship', friendship: item)
c
 json.partial!('post', post: item)
c
@newsfeed.length
@newsfeed
end
  end
    debugger;
    json.partial!('friendship', friendship: item)
  elsif item.type == "friendship"
    debugger;
    json.partial!('post', post: item)
  if item.type == "post"
json.array!(@newsfeed) do |item|
end
  end
    debugger;
    json.partial!('friendship', friendship: item)
  elsif item.type == "friendship"
    debugger;
    json.partial!('post', post: item)
  if item.type == "post"
json.array!(@newsfeed) do |item|
end
  end
    debugger;
    json.partial!('friendship', friendship: item)
  elsif item.type == "friendship"
    debugger;
    json.partial!('post', post: item)
  if item.type == "post"
json.array!(@newsfeed) do |item|
end
  end
    debugger;
    json.partial!('friendship', friendship: item)
  elsif item.type == "friendship"
    debugger;
    json.partial!('post', post: item)
  if item.type == "post"
json.array!(@newsfeed) do |item|
end
  end
    debugger;
    json.partial!('friendship', friendship: item)
  elsif item.type == "friendship"
    debugger;
    json.partial!('post', post: item)
  if item.type == "post"
json.array!(@newsfeed) do |item|
end
  end
    debugger;
    json.partial!('friendship', friendship: item)
  elsif item.type == "friendship"
    debugger;
