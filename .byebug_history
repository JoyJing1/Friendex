c
params
c
@posts[1]
@posts[1].author_profile
@posts.length
@posts[1].author_profile.profile_img
@posts[0].author_profile.profile_img
@posts[0].author_profile
@posts[0]
render "api/posts/index"
@posts
c
@posts
c
params
params[:receiver_id]
receiver_id
receive_id
author_id
@posts
c
upload_preset
cloud_name
c
cloud_name
c
upload_preset
c
ENV['cloud_name']
ENV['CLOUD_NAME']
ENV
c
params
c
params
ENV['UPLOAD_PRESET']
ENV['CLOUD_NAME']
ENV
c
@newsfeed.length
@newsfeed
 json.partial!('friendship', friendship: item)
item
c
cc
c
json.partial!('post', post: item)
item
json.partial!('post', post: item)
c
json.extract!(item,:type,:author_id, :author_first_name, :author_last_name, :author_img,:receiver_id, :receiver_first_name, :receiver_last_name,:post_id, :body,:updated_at)
)
  :updated_at
  :post_id, :body,
  :receiver_id, :receiver_first_name, :receiver_last_name,
  :author_id, :author_first_name, :author_last_name, :author_img,
  :type,
  item,
json.extract!(
item.author_id
item
json.partial!('post', post: item)
json.partial!('post', item: post)
 json.partial!('post', post: item)
item
c
 json.partial!('api/newsfeeds/post', post: item)
item
json.partial!('api/newsfeeds/post', post: item)
json.partial!('api/newsfeeds/friendship', friendship: item)
c
 json.partial!('friendship', friendship: item)
json.partial!('post', post: item)
item
citem
c
result.class
type(result)
result.type
result
c
result
c
result
c
json.partial!('friendship', friendship: item)
c
 json.partial!('post', post: item)
c
@newsfeed.length
@newsfeed
end
  end
    debugger;
    json.partial!('friendship', friendship: item)
  elsif item.type == "friendship"
    debugger;
    json.partial!('post', post: item)
  if item.type == "post"
json.array!(@newsfeed) do |item|
end
  end
    debugger;
    json.partial!('friendship', friendship: item)
  elsif item.type == "friendship"
    debugger;
    json.partial!('post', post: item)
  if item.type == "post"
json.array!(@newsfeed) do |item|
end
  end
    debugger;
    json.partial!('friendship', friendship: item)
  elsif item.type == "friendship"
    debugger;
    json.partial!('post', post: item)
  if item.type == "post"
json.array!(@newsfeed) do |item|
end
  end
    debugger;
    json.partial!('friendship', friendship: item)
  elsif item.type == "friendship"
    debugger;
    json.partial!('post', post: item)
  if item.type == "post"
json.array!(@newsfeed) do |item|
end
  end
    debugger;
    json.partial!('friendship', friendship: item)
  elsif item.type == "friendship"
    debugger;
    json.partial!('post', post: item)
  if item.type == "post"
json.array!(@newsfeed) do |item|
end
  end
    debugger;
    json.partial!('friendship', friendship: item)
  elsif item.type == "friendship"
    debugger;
    json.partial!('post', post: item)
  if item.type == "post"
json.array!(@newsfeed) do |item|
end
  end
    debugger;
    json.partial!('friendship', friendship: item)
  elsif item.type == "friendship"
    debugger;
    json.partial!('post', post: item)
  if item.type == "post"
  # debugger;
json.array!(@newsfeed) do |item|
@newsfeed
json.partial!('post', post: item)
item
c
item
c
item
c
item
c
item.author_first_name
item.author_id
item
c
n
step
item.type
item
c
@newsfeed[0].type
@newsfeed[0]
@newsfeed
c
  @friendships.sort {|e1, e2| e2.updated_at <=> e1.updated_at}
@friendships.sort_by {|e1, e2| e2.updated_at <=> e1.updated_at}
@friendships.sort_by {|e| e.updated_at }.reverse@friendships.sort_by {|e1, e2| e2.updated_at <=> e1.updated_at}
@friendships.sort_by {|e1, e2| e2.updated_at <=> e1.updated_at }
@friendships.sort_by {|e| e.updated_at }.reverse
@friendships.sort_by {|e| e.updated_at }
@friendships
@posts
@friendships
c
@friendships.sort_by { |e| e.created_at }c
@friendships.sort_by { |e| e.created_at }
@friendships.sort_by { |e| e.updated_at }
@friendships
@friendships[0].friend_first_name
@friendships[0].friend_id
@friendships[0]
@friendships
@friendships[0]
@friendships.sort()
@friendships.sort('updated_at DESC')
@friendships.sort_by('updated_at DESC')
@friendships.sort('updated_at DESC')
@friendships.order('updated_at DESC')
@newsfeed.order!('updated_at DESC')
@friendships.reorder(updated_at: :desc)
@friendships.order(updated_at: :desc)
@friendships.order(:updated_at)
@friendships.order(updated_at)
@friendships
[].concat(@friendships).order(updated_at)
[].concat(@friendships)
@friendships
@posts
c
friendship_params['receiver_id']
friendship_params['requestor_id']
friendship_params.requestor_id
friendship_params.receiver_id
Friendship.where("requestor_id = ? AND receiver_id = ?", friendship_params["requestor_id"], friendship_params["receiver_id"])
                                friendship_params["receiver_id"])
                                friendship_params["requestor_id"],
Friendship.where("requestor_id = ? AND receiver_id = ?",
friendship_params['receiver_id']
friendship_params['requestor_id']
friendship_params
 Friendship.where("requestor_id = ? AND receiver_id = ?", friendship_params["requestor_id"], friendship_params["receiver_id"])
params[:id] == "undefined"
params[:id]
params['id']
@friendship
c
@friendship
c
@friendship
c
params['id']
params
Friendship.find(par
Friendship.find(params[:id]
n
step
params["id"]
params.id
params
c
@friend_request
c
friendship_params
c
@friendship.created_at
@friendship.status
c
@friendship.requestor_id
@friendship
c
@friendship.requestor_profile.profile_img
